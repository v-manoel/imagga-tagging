from analyser import Analyser
from constants import Constants
from utils import Utils
import json


def load_images() -> list:
    with open(Constants.IMAGES_JSON_FILE) as json_file:
        images = json.load(json_file)
        return images["images"]


def analyse_images(images: list) -> list[Analyser]:
    analysers = []
    for img in images:
        analyser = Analyser()
        analyser.set_image_data(img)
        analysers.append(analyser)

    return analysers


def build_compare_tags_chart(analysers: list[Analyser], normalized: bool = False) -> None:
    intersec = []
    manual = []
    auto = []
    labels = []

    for analyser in analysers:
        labels.append(analyser.image['id'])
        compared_tags = analyser.analyse_q1_responses(normalized)

        intersec.append(len(compared_tags['intersec']))
        manual.append(len(compared_tags['manual only']))
        auto.append(len(compared_tags['auto only']))

    stack_bar_chart_data = [
        {'label': "Equals tags",
         'value': intersec
         },
        {'label': "Infeered by Human",
         'value': manual
         },
        {'label': "Generated by IA",
         'value': auto
         },
    ]

    filename = "compare_chart" if not normalized else "normalized_compare_chart"
    Analyser.stack_bar_chart(labels, stack_bar_chart_data, filename)


def build_acceptance_chart(analysers: list[Analyser]) -> None:
    acceptances = []
    labels = []

    for analyser in analysers:
        labels.append(analyser.image['id'])
        q2_analysis = analyser.analyse_q2_responses()
        acceptances.append(q2_analysis[1])

    bar_chart_data = {
        'label': 'Acceptance',
        'value': acceptances
    }

    Analyser.bar_chart(labels, bar_chart_data)


def output_compare_tags_analysis(analysers: list[Analyser], filename: str, normalized: bool = False):
    result = []
    for analyser in analysers:
        result.append(analyser.output_q1_result(normalized))

    Utils.to_json_file(result, filename)


def output_acceptance_analysis(analysers: list[Analyser], filename: str):
    result = []
    for analyser in analysers:
        result.append(analyser.output_q2_result())

    Utils.to_json_file(result, filename)


def __main__():
    images = load_images()
    analysers = analyse_images(images)

    # Compare tags without normalized semantical equivalent words
    build_compare_tags_chart(analysers)
    output_compare_tags_analysis(analysers, 'q1_output')

    # Compare tags removing semantical equivalent words
    build_compare_tags_chart(analysers, True)
    output_compare_tags_analysis(analysers, 'q1_normalized_output', True)

    # Check acceptance level
    build_acceptance_chart(analysers)
    output_acceptance_analysis(analysers, 'q2_output')


__main__()
